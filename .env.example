# Quantum Agent Scheduler Environment Configuration
# Copy this file to .env and configure with your values

# =============================================================================
# Application Configuration
# =============================================================================

# Environment (development, staging, production)
QUANTUM_SCHEDULER_ENV=development

# Log level (DEBUG, INFO, WARNING, ERROR, CRITICAL)
QUANTUM_SCHEDULER_LOG_LEVEL=INFO

# API Configuration
API_HOST=0.0.0.0
API_PORT=8080
API_WORKERS=4
API_TIMEOUT=300

# Database Configuration (if using persistent storage)
DATABASE_URL=sqlite:///./quantum_scheduler.db
# DATABASE_URL=postgresql://user:password@localhost:5432/quantum_scheduler

# =============================================================================
# Quantum Backend Configurations
# =============================================================================

# AWS Braket Configuration
AWS_ACCESS_KEY_ID=your_aws_access_key
AWS_SECRET_ACCESS_KEY=your_aws_secret_key
AWS_DEFAULT_REGION=us-east-1
BRAKET_S3_BUCKET=your-braket-bucket
BRAKET_S3_PREFIX=quantum-scheduler/

# IBM Quantum Configuration
QISKIT_IBM_TOKEN=your_ibm_quantum_token
QISKIT_IBM_INSTANCE=ibm-q/open/main
QISKIT_IBM_BACKEND=ibmq_qasm_simulator

# Azure Quantum Configuration
AZURE_QUANTUM_SUBSCRIPTION_ID=your_subscription_id
AZURE_QUANTUM_RESOURCE_GROUP=your_resource_group
AZURE_QUANTUM_WORKSPACE=your_workspace_name
AZURE_QUANTUM_LOCATION=westus
AZURE_CLIENT_ID=your_client_id
AZURE_CLIENT_SECRET=your_client_secret
AZURE_TENANT_ID=your_tenant_id

# D-Wave Configuration
DWAVE_API_TOKEN=your_dwave_token
DWAVE_SOLVER=Advantage_system6.1
DWAVE_ENDPOINT=https://cloud.dwavesys.com/sapi/

# =============================================================================
# Classical Solver Configuration
# =============================================================================

# Solver selection thresholds
QUANTUM_THRESHOLD=50  # Use quantum for problems > 50 variables
COST_BUDGET=10.0      # Maximum cost per solve ($)
TIME_LIMIT=300        # Maximum solve time (seconds)

# Classical optimization
CLASSICAL_SOLVER=gurobi  # gurobi, cplex, scipy, or-tools
CLASSICAL_THREADS=4
CLASSICAL_MEMORY_LIMIT=8GB

# =============================================================================
# Framework Integration
# =============================================================================

# CrewAI Configuration
CREWAI_API_KEY=your_crewai_api_key
CREWAI_BASE_URL=https://api.crewai.com

# AutoGen Configuration
AUTOGEN_CONFIG_PATH=./config/autogen_config.json

# Claude-Flow Configuration
CLAUDE_API_KEY=your_claude_api_key
CLAUDE_BASE_URL=https://api.anthropic.com

# =============================================================================
# Monitoring & Observability
# =============================================================================

# Prometheus Configuration
PROMETHEUS_PORT=9090
PROMETHEUS_SCRAPE_INTERVAL=15s

# Grafana Configuration
GRAFANA_PORT=3000
GRAFANA_ADMIN_USER=admin
GRAFANA_ADMIN_PASSWORD=admin

# Jaeger Tracing
JAEGER_AGENT_HOST=localhost
JAEGER_AGENT_PORT=6831
JAEGER_SAMPLER_TYPE=probabilistic
JAEGER_SAMPLER_PARAM=0.1

# OTEL Configuration
OTEL_EXPORTER_OTLP_ENDPOINT=http://localhost:4317
OTEL_SERVICE_NAME=quantum-agent-scheduler
OTEL_RESOURCE_ATTRIBUTES=service.version=1.0.0

# =============================================================================
# Security Configuration
# =============================================================================

# API Security
JWT_SECRET_KEY=your-super-secret-jwt-key-change-this-in-production
JWT_ALGORITHM=HS256
JWT_EXPIRATION_HOURS=24

# Rate Limiting
RATE_LIMIT_REQUESTS=100
RATE_LIMIT_WINDOW=60  # seconds

# CORS Configuration
CORS_ORIGINS=http://localhost:3000,http://localhost:8080
CORS_METHODS=GET,POST,PUT,DELETE,OPTIONS
CORS_HEADERS=Content-Type,Authorization

# =============================================================================
# Performance & Caching
# =============================================================================

# Redis Configuration (for caching and task queues)
REDIS_URL=redis://localhost:6379/0
REDIS_PASSWORD=your_redis_password

# Task Queue Configuration
CELERY_BROKER_URL=redis://localhost:6379/0
CELERY_RESULT_BACKEND=redis://localhost:6379/0
CELERY_WORKERS=4

# Caching
CACHE_TTL=300  # seconds
CACHE_MAX_SIZE=1000  # items

# =============================================================================
# Development & Testing
# =============================================================================

# Testing Configuration
TEST_DATABASE_URL=sqlite:///./test_quantum_scheduler.db
PYTEST_MARKERS=unit,integration,quantum,performance

# Development Features
DEBUG_MODE=false
HOT_RELOAD=true
PROFILING_ENABLED=false

# Mock Quantum Backends (for testing)
MOCK_QUANTUM_BACKENDS=true
MOCK_QUANTUM_DELAY=1.0  # seconds

# =============================================================================
# Resource Limits
# =============================================================================

# Memory Limits
MAX_MEMORY_USAGE=8GB
MAX_PROBLEM_SIZE=1000  # variables
MAX_CONCURRENT_JOBS=10

# File Limits
MAX_UPLOAD_SIZE=100MB
MAX_LOG_FILE_SIZE=100MB
LOG_RETENTION_DAYS=30

# =============================================================================
# External Service Integration
# =============================================================================

# Notification Configuration
SLACK_WEBHOOK_URL=https://hooks.slack.com/services/your/webhook/url
EMAIL_SMTP_HOST=smtp.gmail.com
EMAIL_SMTP_PORT=587
EMAIL_USERNAME=your_email@gmail.com
EMAIL_PASSWORD=your_app_password

# GitHub Integration
GITHUB_TOKEN=your_github_token
GITHUB_WEBHOOK_SECRET=your_webhook_secret

# Docker Registry
DOCKER_REGISTRY=ghcr.io
DOCKER_USERNAME=your_username
DOCKER_PASSWORD=your_token