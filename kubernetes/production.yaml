apiVersion: v1
kind: Namespace
metadata:
  name: quantum-scheduler
  labels:
    name: quantum-scheduler
    environment: production

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: quantum-scheduler-config
  namespace: quantum-scheduler
data:
  QUANTUM_SCHEDULER_ENV: "production"
  QUANTUM_SCHEDULER_LOG_LEVEL: "info"
  QUANTUM_SCHEDULER_ENABLE_METRICS: "true"
  QUANTUM_SCHEDULER_CACHE_SIZE: "10000"
  QUANTUM_SCHEDULER_MAX_WORKERS: "8"
  QUANTUM_SCHEDULER_BACKEND_STRATEGY: "hybrid"
  QUANTUM_SCHEDULER_HEALTH_CHECK_INTERVAL: "30"
  QUANTUM_SCHEDULER_CIRCUIT_BREAKER_THRESHOLD: "5"
  QUANTUM_SCHEDULER_RETRY_MAX_ATTEMPTS: "3"

---
apiVersion: v1
kind: Secret
metadata:
  name: quantum-scheduler-secrets
  namespace: quantum-scheduler
type: Opaque
data:
  # Base64 encoded secrets - replace with actual values
  quantum_api_key: cXVhbnR1bV9hcGlfa2V5X2hlcmU=
  redis_password: cmVkaXNfcGFzc3dvcmRfaGVyZQ==
  jwt_secret: and0X3NlY3JldF9oZXJl

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: quantum-scheduler-api
  namespace: quantum-scheduler
  labels:
    app: quantum-scheduler-api
    version: v1.0.0
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: quantum-scheduler-api
  template:
    metadata:
      labels:
        app: quantum-scheduler-api
        version: v1.0.0
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8000"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: quantum-scheduler
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        fsGroup: 1000
      containers:
      - name: quantum-scheduler-api
        image: quantum-scheduler:1.0.0-prod
        imagePullPolicy: Always
        ports:
        - containerPort: 8000
          name: http
        env:
        - name: PYTHONPATH
          value: "/app/src"
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        envFrom:
        - configMapRef:
            name: quantum-scheduler-config
        - secretRef:
            name: quantum-scheduler-secrets
        resources:
          requests:
            memory: "2Gi"
            cpu: "1000m"
          limits:
            memory: "4Gi"
            cpu: "2000m"
        livenessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 60
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /ready
            port: 8000
          initialDelaySeconds: 20
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        volumeMounts:
        - name: logs
          mountPath: /app/logs
        - name: temp
          mountPath: /app/temp
        - name: config
          mountPath: /app/config
          readOnly: true
      volumes:
      - name: logs
        emptyDir: {}
      - name: temp
        emptyDir: {}
      - name: config
        configMap:
          name: quantum-scheduler-config
      nodeSelector:
        kubernetes.io/os: linux
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - quantum-scheduler-api
              topologyKey: kubernetes.io/hostname

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: quantum-scheduler-worker
  namespace: quantum-scheduler
  labels:
    app: quantum-scheduler-worker
    version: v1.0.0
spec:
  replicas: 4
  selector:
    matchLabels:
      app: quantum-scheduler-worker
  template:
    metadata:
      labels:
        app: quantum-scheduler-worker
        version: v1.0.0
    spec:
      serviceAccountName: quantum-scheduler
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        fsGroup: 1000
      containers:
      - name: quantum-scheduler-worker
        image: quantum-scheduler:1.0.0-prod
        imagePullPolicy: Always
        command: ["/entrypoint.sh", "worker"]
        env:
        - name: PYTHONPATH
          value: "/app/src"
        - name: WORKER_ID
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        envFrom:
        - configMapRef:
            name: quantum-scheduler-config
        - secretRef:
            name: quantum-scheduler-secrets
        resources:
          requests:
            memory: "1Gi"
            cpu: "500m"
          limits:
            memory: "2Gi"
            cpu: "1000m"
        volumeMounts:
        - name: logs
          mountPath: /app/logs
        - name: temp
          mountPath: /app/temp
      volumes:
      - name: logs
        emptyDir: {}
      - name: temp
        emptyDir: {}

---
apiVersion: v1
kind: Service
metadata:
  name: quantum-scheduler-api
  namespace: quantum-scheduler
  labels:
    app: quantum-scheduler-api
spec:
  type: ClusterIP
  ports:
  - port: 80
    targetPort: 8000
    protocol: TCP
    name: http
  selector:
    app: quantum-scheduler-api

---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: quantum-scheduler-ingress
  namespace: quantum-scheduler
  annotations:
    kubernetes.io/ingress.class: "nginx"
    nginx.ingress.kubernetes.io/use-regex: "true"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    nginx.ingress.kubernetes.io/proxy-body-size: "100m"
    nginx.ingress.kubernetes.io/proxy-connect-timeout: "60"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "60"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "60"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
spec:
  tls:
  - hosts:
    - quantum-scheduler.your-domain.com
    secretName: quantum-scheduler-tls
  rules:
  - host: quantum-scheduler.your-domain.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: quantum-scheduler-api
            port:
              number: 80

---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: quantum-scheduler-api-hpa
  namespace: quantum-scheduler
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: quantum-scheduler-api
  minReplicas: 3
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 100
        periodSeconds: 60

---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: quantum-scheduler-worker-hpa
  namespace: quantum-scheduler
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: quantum-scheduler-worker
  minReplicas: 4
  maxReplicas: 20
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 80
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 85

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: quantum-scheduler
  namespace: quantum-scheduler

---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  namespace: quantum-scheduler
  name: quantum-scheduler-role
rules:
- apiGroups: [""]
  resources: ["pods", "services", "configmaps"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["apps"]
  resources: ["deployments", "replicasets"]
  verbs: ["get", "list", "watch"]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: quantum-scheduler-rolebinding
  namespace: quantum-scheduler
subjects:
- kind: ServiceAccount
  name: quantum-scheduler
  namespace: quantum-scheduler
roleRef:
  kind: Role
  name: quantum-scheduler-role
  apiGroup: rbac.authorization.k8s.io

---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: quantum-scheduler-api-pdb
  namespace: quantum-scheduler
spec:
  minAvailable: 2
  selector:
    matchLabels:
      app: quantum-scheduler-api

---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: quantum-scheduler-worker-pdb
  namespace: quantum-scheduler
spec:
  minAvailable: 2
  selector:
    matchLabels:
      app: quantum-scheduler-worker

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: quantum-scheduler-data
  namespace: quantum-scheduler
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 100Gi
  storageClassName: fast-ssd