[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.poetry]
name = "quantum-agent-scheduler"
version = "0.1.0"
description = "Hybrid classical-quantum scheduler for multi-agent systems"
authors = ["Your Organization <quantum-ai@your-org.com>"]
license = "Apache-2.0"
readme = "README.md"
homepage = "https://github.com/your-org/quantum-agent-scheduler"
repository = "https://github.com/your-org/quantum-agent-scheduler"
documentation = "https://docs.your-org.com/quantum-scheduler"
keywords = ["quantum", "scheduling", "optimization", "agents", "QUBO"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: Apache Software License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: System :: Distributed Computing",
]
packages = [{include = "quantum_scheduler", from = "src"}]

[tool.poetry.dependencies]
python = ">=3.10,<=3.13"
numpy = "^1.24.0"
scipy = "^1.10.0"
networkx = "^3.0"
pydantic = "^2.0.0"
click = "^8.2.1"
rich = "^13.0.0"
typer = "^0.9.0"
fastapi = {version = "^0.100.0", optional = true}
uvicorn = {version = "^0.23.0", optional = true}

# Quantum backends (optional)
qiskit = {version = "^1.0.0", optional = true}
amazon-braket-sdk = {version = "^1.60.0", optional = true}
azure-quantum = {version = "^1.0.0", optional = true}
dwave-ocean-sdk = {version = "^8.4.0", optional = true}

# Agent framework integrations (optional)
crewai = {version = "^0.30.0", optional = true}
autogen-agentchat = {version = "^0.7.2", optional = true}

# Visualization (optional)
matplotlib = {version = "^3.7.0", optional = true}
plotly = {version = "^5.15.0", optional = true}
seaborn = {version = "^0.12.0", optional = true}

[tool.poetry.group.dev.dependencies]
pytest = "^7.4.0"
pytest-cov = "^4.1.0"
pytest-asyncio = "^0.23.8"
pytest-mock = "^3.11.0"
pytest-benchmark = "^4.0.0"
black = "^23.7.0"
isort = "^6.0.1"
flake8 = "^7.3.0"
mypy = "^1.5.0"
pre-commit = "^4.3.0"
bandit = "^1.7.0"
safety = "^3.2.9"
ruff = "^0.0.280"

[tool.poetry.group.docs.dependencies]
mkdocs = "^1.5.0"
mkdocs-material = "^9.2.0"
mkdocstrings = {extras = ["python"], version = "^0.22.0"}
mkdocs-gen-files = "^0.5.0"
mkdocs-literate-nav = "^0.6.0"

[tool.poetry.group.quantum.dependencies]
qiskit = "^1.0.0"
amazon-braket-sdk = "^1.60.0"
dwave-ocean-sdk = "^8.4.0"

[tool.poetry.extras]
all = ["qiskit", "amazon-braket-sdk", "azure-quantum", "dwave-ocean-sdk", "crewai", "autogen-agentchat", "matplotlib", "plotly", "seaborn", "fastapi", "uvicorn"]
braket = ["amazon-braket-sdk"]
qiskit = ["qiskit"]
azure = ["azure-quantum"]
dwave = ["dwave-ocean-sdk"]
crewai = ["crewai"]
autogen = ["autogen-agentchat"]
viz = ["matplotlib", "plotly", "seaborn"]
api = ["fastapi", "uvicorn"]

[tool.poetry.scripts]
quantum-scheduler = "quantum_scheduler.cli:main"

[tool.black]
line-length = 88
target-version = ['py39']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["quantum_scheduler"]

[tool.ruff]
target-version = "py39"
line-length = 88
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long (handled by black)
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]
"tests/**/*" = ["F401", "F811"]

[tool.mypy]
python_version = "3.9"
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_return_any = true
strict_optional = true

[[tool.mypy.overrides]]
module = [
    "qiskit.*",
    "braket.*",
    "dwave.*",
    "crewai.*",
    "autogen.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "quantum: marks tests as requiring quantum hardware (deselect with '-m \"not quantum\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.bandit]
exclude_dirs = ["tests"]
skips = ["B101", "B601"]