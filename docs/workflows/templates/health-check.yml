name: Health Check

on:
  schedule:
    - cron: '0 8 * * *'  # Daily at 8 AM UTC
  workflow_dispatch:

jobs:
  repository-health:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Check repository structure
      run: |
        echo "=== Repository Health Check ==="
        echo "✓ Checking essential files..."
        
        # Check for essential files
        for file in README.md LICENSE CONTRIBUTING.md SECURITY.md; do
          if [ -f "$file" ]; then
            echo "✓ $file exists"
          else
            echo "❌ $file missing"
            exit 1
          fi
        done
        
        echo "✓ Checking workflow files..."
        WORKFLOW_COUNT=$(find .github/workflows -name "*.yml" | wc -l)
        echo "Found $WORKFLOW_COUNT workflow files"
        
        if [ $WORKFLOW_COUNT -lt 5 ]; then
          echo "❌ Insufficient workflow coverage"
          exit 1
        fi
        
        echo "✓ Repository structure looks healthy"

  dependency-audit:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.11
        
    - name: Install Poetry
      uses: snok/install-poetry@v1
      
    - name: Check dependency health
      run: |
        echo "=== Dependency Health Check ==="
        
        # Check for outdated dependencies
        poetry show --outdated
        
        # Generate requirements for audit
        poetry export --format requirements.txt --output requirements.txt --without-hashes
        
        # Install pip-audit for security checks
        pip install pip-audit
        pip-audit --requirement requirements.txt --format json --output audit-results.json
        
        echo "✓ Dependency audit completed"
        
    - name: Upload audit results
      uses: actions/upload-artifact@v3
      with:
        name: dependency-audit
        path: audit-results.json

  performance-baseline:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.11
        
    - name: Install Poetry
      uses: snok/install-poetry@v1
      
    - name: Install dependencies
      run: poetry install --with dev
      
    - name: Run performance baseline
      run: |
        echo "=== Performance Baseline Check ==="
        
        # Run quick performance tests
        poetry run pytest tests/ -m "not slow and not quantum" \
          --benchmark-only --benchmark-json=baseline.json \
          --benchmark-warmup=off --benchmark-disable-gc
        
        echo "✓ Performance baseline established"
        
    - name: Store performance baseline
      uses: benchmark-action/github-action-benchmark@v1
      with:
        tool: 'pytest'
        output-file-path: baseline.json
        github-token: ${{ secrets.GITHUB_TOKEN }}
        auto-push: true

  security-posture:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Security configuration check
      run: |
        echo "=== Security Posture Check ==="
        
        # Check for security configurations
        if [ -f ".pre-commit-config.yaml" ]; then
          echo "✓ Pre-commit hooks configured"
        else
          echo "❌ Pre-commit hooks missing"
          exit 1
        fi
        
        if [ -f ".secrets.baseline" ]; then
          echo "✓ Secrets baseline exists"
        else
          echo "❌ Secrets baseline missing"
          exit 1
        fi
        
        if [ -f "SECURITY.md" ]; then
          echo "✓ Security policy documented"
        else
          echo "❌ Security policy missing"
          exit 1
        fi
        
        echo "✓ Security posture looks good"

  documentation-health:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.11
        
    - name: Install Poetry
      uses: snok/install-poetry@v1
      
    - name: Install documentation dependencies
      run: poetry install --with docs
      
    - name: Build documentation
      run: |
        echo "=== Documentation Health Check ==="
        
        # Try building documentation
        poetry run mkdocs build --strict
        
        # Check for broken links (basic check)
        echo "✓ Documentation builds successfully"
        
        # Check documentation coverage
        DOC_FILES=$(find docs -name "*.md" | wc -l)
        echo "Found $DOC_FILES documentation files"
        
        if [ $DOC_FILES -lt 5 ]; then
          echo "❌ Limited documentation coverage"
          exit 1
        fi
        
        echo "✓ Documentation health looks good"

  create-health-report:
    runs-on: ubuntu-latest
    needs: [repository-health, dependency-audit, performance-baseline, security-posture, documentation-health]
    if: always()
    steps:
    - name: Create health report issue
      if: failure()
      uses: imjohnbo/issue-bot@v3
      with:
        assignees: "maintainer-team"
        labels: "health-check,automated,priority-high"
        title: "Repository Health Check Failed - $(date +'%Y-%m-%d')"
        body: |
          ## Repository Health Check Report
          
          **Date**: $(date)
          **Status**: ❌ FAILED
          
          One or more health checks have failed. Please review the workflow run for details:
          
          ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
          
          ### Failed Checks:
          ${{ needs.repository-health.result == 'failure' && '- Repository Health' || '' }}
          ${{ needs.dependency-audit.result == 'failure' && '- Dependency Audit' || '' }}
          ${{ needs.performance-baseline.result == 'failure' && '- Performance Baseline' || '' }}
          ${{ needs.security-posture.result == 'failure' && '- Security Posture' || '' }}
          ${{ needs.documentation-health.result == 'failure' && '- Documentation Health' || '' }}
          
          Please address these issues promptly to maintain repository health.
          
          This issue was automatically created by the health check workflow.
        token: ${{ secrets.GITHUB_TOKEN }}